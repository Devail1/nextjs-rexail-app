import React, { useEffect, useCallback, useState } from "react";
import type { GetStaticProps, NextPage } from "next";
import { useDispatch, useSelector } from "react-redux";
import Head from "next/head";
import Link from "next/link";
import { ReactWindowScroller } from "react-window-scroller";

import { FixedSizeGrid as Grid } from "react-window";

import { TCategory, TProduct } from "types";

import StoreItem from "components/StoreItem";
import List from "components/List";
import SideCartItem from "components/SideCartItem";

const Store: NextPage = () => {
  const store = useSelector((state: any) => state);

  const dispatch = useDispatch();

  const {
    products: productsCatalog,
    cart: { cartItems, cartTotal },
    config: { currencySign },
  } = useSelector((state: any) => state);

  const searchQuery = store.search;

  const [selectedCategory, setSelectedCategory] = useState<TCategory>({} as TCategory);

  const [isSortDropdownToggled, setIsSortDropdownToggled] = useState(false);
  const [selectedSortBy, setSelectedSortBy] = useState<string>("");

  useEffect(() => {
    if (productsCatalog) {
      setSelectedCategory(productsCatalog[0]);
    }
  }, [productsCatalog]);

  useEffect(() => {
    let debounce = setTimeout(() => {
      if (selectedCategory.children) {
        let currentCategory = productsCatalog.filter(
          (category: TCategory) => category.id === selectedCategory.id
        )[0];
        if (searchQuery.length >= 3) {
          setSelectedCategory({
            ...selectedCategory,
            children: currentCategory.children?.filter((product: TProduct) =>
              product.fullName.includes(searchQuery)
            ),
          });
        } else {
          setSelectedCategory(currentCategory);
        }
      }
    }, 800);
    return () => clearTimeout(debounce);
  }, [searchQuery]);

  const handleCategoryClick = useCallback((item: TCategory) => {
    setSelectedCategory(item);
    dispatch({ type: "searchQuery/setSearchQuery", payload: "" });
    setSelectedSortBy("");
  }, []);

  const handleSortByClick = useCallback(
    (value: string) => {
      let sorted;

      if (value === "שם מוצר")
        sorted = selectedCategory?.children?.sort((a, b) => (a.fullName > b.fullName ? 1 : -1)) as TProduct[];
      if (value === "מחיר מהנמוך לגבוה")
        sorted = selectedCategory?.children?.sort((a, b) => (a.price > b.price ? 1 : -1)) as TProduct[];
      if (value === "מחיר מהגבוהה לנמוך")
        sorted = selectedCategory?.children?.sort((a, b) => (a.price < b.price ? 1 : -1)) as TProduct[];
      if (value === "מוצרים במבצע")
        sorted = selectedCategory?.children?.sort((a, b) => (a.promoted < b.promoted ? 1 : -1)) as TProduct[];

      setSelectedCategory({
        ...selectedCategory,
        children: sorted,
      });
      setSelectedSortBy(value);
    },
    [selectedCategory]
  );

  const Cell = useCallback(
    ({ style, rowIndex, columnIndex, columnCount = 4 }) => {
      const item =
        selectedCategory.children && selectedCategory.children[rowIndex * columnCount + columnIndex];

      return (
        <div style={style}>
          {item ? <StoreItem key={item.id} currencySign={currencySign} product={item} /> : ""}
        </div>
      );
    },
    [selectedCategory?.children]
  );

  return (
    <div className="pb-73">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/public/images/favicon.ico" />
      </Head>
      <nav id="categories" className="categories-wrapper">
        <ul className="container mx-auto h-full display-flex align-center justify-evenly font-gray-900">
          <List<TCategory>
            items={productsCatalog?.slice(0, 10)}
            renderItem={(item) => (
              <li
                key={item.id}
                className={selectedCategory?.id === item.id ? "category selected" : "category"}
              >
                <button type="button" onClick={() => handleCategoryClick(item)}>
                  {item.name}&nbsp;
                </button>
              </li>
            )}
          />
          {productsCatalog.length > 10 ? (
            <ul className="category show-more-categories">
              <span>עוד</span>
              <ul className="categories-show-more display-flex flex-vertical absolute pt-10 rounded-10">
                <List<TCategory>
                  items={productsCatalog?.slice(10, productsCatalog.length)}
                  renderItem={(item) => (
                    <li key={item.id} className="category show-more">
                      <button type="button" onClick={() => handleCategoryClick(item)}>
                        {item.name}&nbsp;
                      </button>
                    </li>
                  )}
                />
              </ul>
            </ul>
          ) : (
            ""
          )}
        </ul>
      </nav>

      <div className="container mx-auto pt-20">
        <div className="display-flex relative">
          <div className="store-widget">
            <div className="display-flex justify-between align-center">
              <h1 className="font-heebo font-blue">{selectedCategory?.name}</h1>
              <button
                type="button"
                className={
                  selectedSortBy && isSortDropdownToggled
                    ? "dropdown-active selected-sort sort-items c-p display-flex justify-between relative"
                    : selectedSortBy
                    ? "selected-sort sort-items c-p display-flex justify-between relative"
                    : isSortDropdownToggled
                    ? "dropdown-active sort-items c-p display-flex justify-between relative"
                    : "sort-items c-p display-flex justify-between relative"
                }
                onClick={() => setIsSortDropdownToggled(!isSortDropdownToggled)}
              >
                <span className="font-blue">{selectedSortBy ? selectedSortBy : "מיין לפי"}</span>
                <svg className="icon-arrow-down" viewBox="0 0 11 11" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M5.5 6.746 1.341 2.587a.786.786 0 0 0-1.11 1.111l4.713 4.715a.786.786 0 0 0 1.112 0l4.714-4.715a.786.786 0 0 0-1.111-1.11L5.5 6.745z"
                    fill="currentColor"
                    fillRule="evenodd"
                  />
                </svg>

                {isSortDropdownToggled ? (
                  <ul className="dropdown-menu absolute mt-30">
                    <li className="dropdown-item" onClick={() => handleSortByClick("שם מוצר")}>
                      <a>שם מוצר</a>
                    </li>
                    <li className="dropdown-item" onClick={() => handleSortByClick("מחיר מהנמוך לגבוה")}>
                      <a>מחיר מהנמוך לגבוה </a>
                    </li>
                    <li className="dropdown-item" onClick={() => handleSortByClick("מחיר מהגבוהה לנמוך")}>
                      <a>מחיר מהגבוהה לנמוך </a>
                    </li>
                    <li className="dropdown-item" onClick={() => handleSortByClick("מוצרים במבצע")}>
                      <a>מוצרים במבצע</a>
                    </li>
                  </ul>
                ) : (
                  ""
                )}
              </button>
            </div>
            <div className="mt-30 h-full">
              {selectedCategory?.children?.length ? (
                <ReactWindowScroller isGrid>
                  {({ ref, outerRef, style, onScroll }: any) => {
                    return (
                      <Grid
                        ref={ref}
                        style={style}
                        outerRef={outerRef}
                        onScroll={onScroll}
                        className="overflow-visible"
                        direction="rtl"
                        columnCount={4}
                        columnWidth={220}
                        rowHeight={315}
                        height={window.innerHeight}
                        width={window.innerWidth}
                        rowCount={Math.ceil(selectedCategory.children!.length / 4)}
                      >
                        {Cell}
                      </Grid>
                    );
                  }}
                </ReactWindowScroller>
              ) : (
                ""
              )}
              {searchQuery && !selectedCategory?.children?.length ? (
                <div className="font-blue font-heebo text-weight-600 font-size-22 no-wrap">
                  לא נמצאו תוצאות לחיפוש
                </div>
              ) : (
                ""
              )}
            </div>
          </div>
          <div className="cart-preview-wrapper">
            <section className="cart-preview">
              <div className="cart-preview-header display-flex align-center px-16">
                <img className="w-22 h-22 ml-10" src="/icons/button-arrow-up.svg" />
                <img className="icon-basket" src="/icons/icon-basket-green.svg" />
                <span className="text-sm font-white mt-8 cart-preview-items-count">{cartItems.length}</span>
                <div className="display-flex flex-vertical font-white mr-8 ml-auto">
                  <span className="text-weight-300 font-size-14">סל הקניות שלי</span>
                  <span className="font-size-18">
                    {currencySign}
                    {cartTotal}
                  </span>
                </div>
                <button
                  type="button"
                  className="proceed-to-checkout-btn font-white font-size-16"
                  disabled={!cartItems.length}
                >
                  <span>
                    {!cartItems.length ? (
                      <a>המשך לתשלום</a>
                    ) : (
                      <Link href="/cart">
                        <a>המשך לתשלום</a>
                      </Link>
                    )}
                  </span>
                </button>
              </div>
              <div className="cart-preview-subheader px-16">
                <button
                  type="button"
                  className="c-p display-flex align-center h-full w-85 mr-auto"
                  onClick={() => dispatch({ type: "cart/cleared" })}
                >
                  <img src="/icons/icon-trash.svg" />
                  <span className="mr-5 font-size-14"> מחיקת סל </span>
                </button>
              </div>
              <div className="cart-items-preview-wrapper">
                {!cartItems.length ? (
                  <div className="display-flex flex-vertical align-center pt-20">
                    <img src="/images/empty-basket.png" />
                    <span className="mt-10 font-size-22 font-blue text-weight-700 font-heebo">
                      סל הקניות שלכם ריק
                    </span>
                    <span className="font-blue font-size-16">התחילו להוסיף מוצרים</span>
                  </div>
                ) : (
                  <List<TProduct>
                    items={cartItems}
                    renderItem={(item) => (
                      <SideCartItem key={item.id} currencySign={currencySign} product={item} />
                    )}
                  />
                )}
              </div>
              <div className="cart-preview-footer px-28 display-flex flex-vertical align-center justify-center">
                <button type="button" className="btn-green w-full" disabled={!cartItems.length}>
                  {!cartItems.length ? (
                    <a className="w-full h-full">
                      <div className="display-flex align-center justify-between h-full">
                        <span className="font-heebo text-weight-500 font-white checkout-text">
                          המשך לתשלום
                        </span>
                        <span className="font-heebo text-weight-500 font-white total-sum">
                          {currencySign}
                          {cartTotal}
                        </span>
                      </div>
                    </a>
                  ) : (
                    <Link href="/cart">
                      <a className="w-full h-full">
                        <div className="display-flex align-center justify-between h-full">
                          <span className="font-heebo text-weight-500 font-white checkout-text">
                            המשך לתשלום
                          </span>
                          <span className="font-heebo text-weight-500 font-white total-sum">
                            {currencySign}
                            {cartTotal}
                          </span>
                        </div>
                      </a>
                    </Link>
                  )}
                </button>
                <span className="font-darkgray font-size-14 mt-5">שערוך. עלות סופית לפני שקילה.</span>
              </div>
            </section>
          </div>
        </div>
      </div>
    </div>
  );
};

// Store.whyDidYouRender = {
//   logOnDifferentValues: true,
//   customName: "Store",
// };

export default Store;

export const getStaticProps: GetStaticProps = async (context) => {
  return {
    props: {}, // will be passed to the page component as props
  };
};
